AWSTemplateFormatVersion: 2010-09-09
Description: Lambda@Edge function for Origin Request modification with enhanced cleanup logic.

Parameters:
  ResourcePrefix:
    Type: String
    Description: Prefix to use for resource names

Resources:
  EdgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}-path-edge-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  EdgeLambdaCleanupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaEdgeCleanup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:ListVersionsByFunction
                  - lambda:DeleteFunction
                Resource: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:${ResourcePrefix}-path-edge-function*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  EdgeLambdaCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt EdgeLambdaCleanupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time

          def handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      lambda_client = boto3.client('lambda')
                      function_name = event['ResourceProperties']['FunctionName']

                      # Wait for replication (60 seconds)
                      time.sleep(60)

                      # List and delete all versions except $LATEST
                      versions = lambda_client.list_versions_by_function(FunctionName=function_name)['Versions']
                      for version in versions:
                          if version['Version'] != '$LATEST':
                              lambda_client.delete_function(FunctionName=function_name, Qualifier=version['Version'])

                      # Delete main function
                      lambda_client.delete_function(FunctionName=function_name)

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f"Error: {e}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
      Runtime: python3.9
      Timeout: 120
      MemorySize: 128

  EdgeLambdaCleanupTrigger:
    Type: Custom::EdgeLambdaCleanup
    Properties:
      ServiceToken: !GetAtt EdgeLambdaCleanupFunction.Arn
      FunctionName: !Ref EdgeLambdaFunction

  EdgeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ResourcePrefix}-path-edge-function"
      RetentionInDays: 14  # Adjust retention period as needed.

  EdgeLambdaFunction:
    DependsOn: EdgeLambdaRole
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ResourcePrefix}-path-edge-function"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              request = event['Records'][0]['cf']['request']
              uri = request['uri']
              
              headers = request.get('headers', {})
              
              referer = headers.get('referer', [{'value': ''}])[0].get('value', '')
              print(f"Referer: {referer}")
              
              try:
                  if referer:
                      folder = referer.split('://')[-1].split('/')[1]
                      uri = uri.lstrip('/')
                      request['uri'] = f"/{folder}/{uri}"
                      print(f"Modified URI: {request['uri']}")
                  else:
                      print("No referer found")
              except Exception as e:
                  print(f"Error: {e}")
                  
              return request
      Handler: index.lambda_handler
      Role: !GetAtt EdgeLambdaRole.Arn
      Runtime: python3.11
      Timeout: 5
      MemorySize: 128

  EdgeLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref EdgeLambdaFunction
      Description: v1

Outputs:
  LambdaVersionArn:
    Description: Lambda function version ARN
    Value: !Ref EdgeLambdaVersion
    Export:
      Name: !Sub "${ResourcePrefix}-path-edge-function-version"
