AWSTemplateFormatVersion: 2010-09-09
Description: Lambda@Edge function for Origin Request modification

Parameters:
    ResourcePrefix:
        Type: String
        Description: Prefix to use for resource names

Resources:
  EdgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}-path-edge-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  EdgeLambdaCleanupRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: LambdaEdgeCleanup
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - lambda:DeleteFunction
                                - lambda:GetFunction
                                - cloudfront:GetDistribution
                                - cloudfront:ListDistributions
                            Resource: '*'

  EdgeLambdaCleanupFunction:
        Type: AWS::Lambda::Function
        Properties:
            Handler: index.handler
            Role: !GetAtt EdgeLambdaCleanupRole.Arn
            Code:
                ZipFile: |
                    import boto3
                    import cfnresponse
                    import time
                    
                    def handler(event, context):
                        lambda_client = boto3.client('lambda')
                        cf_client = boto3.client('cloudfront')
                        
                        try:
                            if event['RequestType'] == 'Delete':
                                function_name = event['ResourceProperties']['FunctionName']
                                
                                # Wait for CloudFront to fully disable the Lambda@Edge function
                                wait_for_function_disable(cf_client, function_name)
                                
                                # List and delete all versions first
                                delete_all_versions(lambda_client, function_name)
                                
                                # Finally try to delete the function itself
                                retry_delete_function(lambda_client, function_name)
                                
                            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                        except Exception as e:
                            print(f"Error: {str(e)}")
                            cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
                    
                    def delete_all_versions(lambda_client, function_name):
                        try:
                            # Get all versions except $LATEST
                            paginator = lambda_client.get_paginator('list_versions_by_function')
                            for page in paginator.paginate(FunctionName=function_name):
                                for version in page['Versions']:
                                    version_number = version['Version']
                                    if version_number != '$LATEST':
                                        try:
                                            print(f"Attempting to delete version {version_number}")
                                            # Try to delete the version
                                            max_attempts = 5
                                            for attempt in range(max_attempts):
                                                try:
                                                    lambda_client.delete_function(
                                                        FunctionName=function_name,
                                                        Qualifier=version_number
                                                    )
                                                    print(f"Successfully deleted version {version_number}")
                                                    break
                                                except lambda_client.exceptions.ResourceNotFoundException:
                                                    print(f"Version {version_number} already deleted")
                                                    break
                                                except Exception as e:
                                                    if attempt == max_attempts - 1:
                                                        print(f"Failed to delete version {version_number} after {max_attempts} attempts: {str(e)}")
                                                    else:
                                                        print(f"Attempt {attempt + 1} failed, retrying in 30 seconds...")
                                                        time.sleep(30)
                                            
                                        except Exception as e:
                                            print(f"Error deleting version {version_number}: {str(e)}")
                                            # Continue with other versions even if one fails
                                            continue
                        except Exception as e:
                            print(f"Error listing versions: {str(e)}")
                            raise
                    
                    def wait_for_function_disable(cf_client, function_name):
                        max_attempts = 30
                        attempt = 0
                        while attempt < max_attempts:
                            distributions = cf_client.list_distributions()['DistributionList'].get('Items', [])
                            is_in_use = False
                            
                            for dist in distributions:
                                dist_config = cf_client.get_distribution(Id=dist['Id'])['Distribution']['DistributionConfig']
                                if check_function_in_distribution(dist_config, function_name):
                                    is_in_use = True
                                    break
                            
                            if not is_in_use:
                                print(f"Function {function_name} is no longer used by any CloudFront distributions")
                                # Add additional wait time after confirmation
                                time.sleep(60)  # Wait an extra minute to be sure
                                return
                                
                            attempt += 1
                            if attempt < max_attempts:
                                time.sleep(30)  # Wait 30 seconds before checking again
                        
                        raise Exception(f"Timeout waiting for function {function_name} to be disabled in CloudFront")
                    
                    def check_function_in_distribution(dist_config, function_name):
                        behavior = dist_config.get('DefaultCacheBehavior', {})
                        lambdas = behavior.get('LambdaFunctionAssociations', {}).get('Items', [])
                        
                        for lambda_assoc in lambdas:
                            if function_name in lambda_assoc.get('LambdaFunctionARN', ''):
                                return True
                        return False
                    
                    def retry_delete_function(lambda_client, function_name):
                        max_attempts = 10
                        attempt = 0
                        
                        while attempt < max_attempts:
                            try:
                                lambda_client.delete_function(FunctionName=function_name)
                                print(f"Successfully deleted function {function_name}")
                                return
                            except lambda_client.exceptions.ResourceNotFoundException:
                                print(f"Function {function_name} already deleted")
                                return
                            except Exception as e:
                                print(f"Attempt {attempt + 1} failed: {str(e)}")
                                attempt += 1
                                if attempt < max_attempts:
                                    time.sleep(30)
                        
                        raise Exception(f"Failed to delete function {function_name} after {max_attempts} attempts")

            Runtime: python3.9
            Timeout: 900  # 15 minutes
            MemorySize: 128

  EdgeLambdaCleanupTrigger:
      Type: Custom::EdgeLambdaCleanup
      Properties:
          ServiceToken: !GetAtt EdgeLambdaCleanupFunction.Arn
          FunctionName: !Ref EdgeLambdaFunction

  EdgeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ResourcePrefix}-path-edge-lambda"
      RetentionInDays: 14  # Adjust retention period as needed.

  EdgeLambdaFunction:
    DependsOn: EdgeLambdaRole
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ResourcePrefix}-path-edge-lambda"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              request = event['Records'][0]['cf']['request']
              uri = request['uri']
              
              headers = request.get('headers', {})
              
              referer = headers.get('referer', [{'value': ''}])[0].get('value', '')
              print(f"Referer: {referer}")
              
              try:
                  if referer:
                      folder = referer.split('://')[-1].split('/')[1]
                      uri = uri.lstrip('/')
                      request['uri'] = f"/{folder}/{uri}"
                      print(f"Modified URI: {request['uri']}")
                  else:
                      print("No referer found")
              except Exception as e:
                  print(f"Error: {e}")
                  
              return request
      Handler: index.lambda_handler
      Role: !GetAtt EdgeLambdaRole.Arn
      Runtime: python3.11  # Use an appropriate runtime version.
      Timeout: 5
      MemorySize: 128

  EdgeLambdaVersion:
      Type: AWS::Lambda::Version
      Properties:
          FunctionName: !Ref EdgeLambdaFunction
          Description: v1

Outputs:
  LambdaVersionArn:
      Description: Lambda function version ARN
      Value: !Ref EdgeLambdaVersion
      Export:
          Name: !Sub "${ResourcePrefix}-path-edge-lambda-version"