AWSTemplateFormatVersion: '2010-09-09'
Description: 'Well-Architected CloudFormation template for Lambda@Edge with security headers and cleanup logic'

Parameters:
  ResourcePrefix:
    Type: String
    Description: "Prefix for naming resources (e.g., myapp)."

Resources:
  # IAM Role for Lambda@Edge
  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EdgeLambdaLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:log-group:/aws/lambda/*"

  # Lambda@Edge Function
  EdgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              request = event['Records'][0]['cf']['request']
              response = event['Records'][0]['cf']['response']
              
              headers = response.get('headers', {})
              
              # Add security headers
              headers['strict-transport-security'] = [{'key': 'Strict-Transport-Security', 'value': 'max-age=63072000; includeSubDomains; preload'}]
              headers['x-content-type-options'] = [{'key': 'X-Content-Type-Options', 'value': 'nosniff'}]
              headers['x-frame-options'] = [{'key': 'X-Frame-Options', 'value': 'DENY'}]
              headers['referrer-policy'] = [{'key': 'Referrer-Policy', 'value': 'same-origin'}]
              headers['content-security-policy'] = [{'key': 'Content-Security-Policy', 'value': "default-src 'self';"}]
              
              # Handle preflight OPTIONS request
              if request['method'] == 'OPTIONS':
                  response['status'] = '204'
                  response['statusDescription'] = 'No Content'
              
              return response
      Handler: index.lambda_handler
      Role: !GetAtt LambdaEdgeRole.Arn
      Runtime: python3.9
      MemorySize: 128
      Timeout: 5
      FunctionName: !Sub "${ResourcePrefix}-csp-edge-function"

  # Lambda Version
  EdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref EdgeFunction

  # Cleanup Lambda Function
  CleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time

          def handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      lambda_client = boto3.client('lambda')
                      function_name = event['ResourceProperties']['FunctionName']
                      versions = lambda_client.list_versions_by_function(FunctionName=function_name)

                      # Wait for replication
                      time.sleep(60)
                      
                      # Delete versions
                      for version in versions['Versions']:
                          if version['Version'] != '$LATEST':
                              lambda_client.delete_function(FunctionName=function_name, Qualifier=version['Version'])

                      # Delete function
                      lambda_client.delete_function(FunctionName=function_name)

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f"Error: {e}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt CleanupFunctionRole.Arn
      MemorySize: 128
      Timeout: 120

  # IAM Role for Cleanup Lambda
  CleanupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CleanupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:ListVersionsByFunction
                  - lambda:DeleteFunction
                Resource: !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:${ResourcePrefix}-csp-edge-function*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:log-group:/aws/lambda/*"

  # Custom Resource for Cleanup
  EdgeFunctionCleanup:
    Type: Custom::EdgeFunctionCleanup
    Properties:
      ServiceToken: !GetAtt CleanupFunction.Arn
      FunctionName: !Ref EdgeFunction

Outputs:
  EdgeFunctionArn:
    Description: ARN of the Lambda@Edge function
    Value: !Ref EdgeFunctionVersion
